),
nav_panel("MU03",
tags$p("Línea MU03-1xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot34", width = 1200),
tags$p("Línea MU03-2xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot35", width = 1200)
),
nav_panel("MU05",
tags$p("Línea MU05-1xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot36", width = 1200),
tags$p("Línea MU05-2xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot37", width = 1200)
),
nav_panel("MU06",
tags$p("Línea MU06-1xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot38", width = 1200),
tags$p("Línea MU06-2xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot39", width = 1200)
),
nav_panel("MU07",
tags$p("Línea MU07-1xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot40", width = 1200),
tags$p("Línea MU07-2xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot41", width = 1200)
),
nav_panel("MU08",
tags$p("Línea MU08-1xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot42", width = 1200),
tags$p("Línea MU08-2xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot43", width = 1200)
),
nav_panel("MU09",
tags$p("Línea MU09-1xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot44", width = 1200),
tags$p("Línea MU09-2xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot45", width = 1200)
),
nav_panel("MU10",
tags$p("Línea MU10-1xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot46", width = 1200),
tags$p("Línea MU10-2xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot47", width = 1200)
),
nav_panel("MU11",
tags$p("Línea MU11-1xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot48", width = 1200),
tags$p("Línea MU11-2xx", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot49", width = 1200)
),
),
style = "background-color: #ffffff; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);"
)
)
)
}
else if (input$select_option == "nivel3") {
# Contenido para la opción "Entrada de equipajes al sistema"
fluidRow(
# Primer card con un único navPanel "Máxima Demanda"
column(4,
card(
navset_underline(
nav_panel("Máxima demanda",
dataTableOutput("tab_L3")  # Tabla dentro del card
)
),
style = "background-color: #ffffff; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);"
)
),
# Segundo card con múltiples navPanels para gráficos
column(8,
card(
navset_underline(
nav_panel("Nivel 3",
tags$p("Demanda en Nivel 3", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot19", width = 1200),
tags$p("Operadores necesarios en Nivel 3", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot_op1", width = 1200)
),
),
style = "background-color: #ffffff; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);"
)
)
)
}
else if (input$select_option == "eds") {
# Contenido para la opción "Entrada de equipajes al sistema"
fluidRow(
# Primer card con un único navPanel "Máxima Demanda"
column(4,
card(
navset_underline(
nav_panel("Máxima demanda",
dataTableOutput("tab_eds")  # Tabla dentro del card
)
),
style = "background-color: #ffffff; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);"
)
),
# Segundo card con múltiples navPanels para gráficos
column(8,
card(
navset_underline(
nav_panel("Total",
tags$p("Demanda total en las líneas de inspección", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot20", width = 1200),
tags$p("Operadores necesarios en Nivel 2", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot_op2", width = 1200)
),
nav_panel("1L1",
tags$p("Línea 1L1", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot21", width = 1200)
),
nav_panel("1L2",
tags$p("Línea 1L2", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot22", width = 1200)
),
nav_panel("1L3",
tags$p("Línea 1L3", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot23", width = 1200)
),
nav_panel("1L4",
tags$p("Línea 1L4", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot24", width = 1200)
),
nav_panel("1L5",
tags$p("Línea 1L5", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot25", width = 1200)
),
nav_panel("1L6",
tags$p("Línea 1L6", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot26", width = 1200)
),
nav_panel("1L7",
tags$p("Línea 1L7", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot27", width = 1200)
),
),
style = "background-color: #ffffff; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);"
)
)
)
}
else if (input$select_option == "eds") {
# Contenido para la opción "Entrada de equipajes al sistema"
fluidRow(
# Primer card con un único navPanel "Máxima Demanda"
column(4,
card(
navset_underline(
nav_panel("Máxima demanda",
dataTableOutput("tab_ebs")  # Tabla dentro del card
)
),
style = "background-color: #ffffff; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);"
)
),
# Segundo card con múltiples navPanels para gráficos
column(8,
card(
navset_underline(
nav_panel("Automático",
tags$p("EBS Automático", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot50", width = 1200)
),
nav_panel("Manual",
tags$p("EBS Manual", style = "font-weight: bold; font-size: 16px; margin-bottom: 10px;"),  # Texto antes del gráfico
plotlyOutput("plot51", width = 1200)
),
),
style = "background-color: #ffffff; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);"
)
)
)
}
})
})#Fin del observe
#### 3.7. Observe para Capturas de Pantalla ####
#Inicio de observe events referentes a hacer capturas de pantalla en los resultados
observeEvent(input$screenshot_EBS, {
screenshot()  # Captura toda la pantalla visible de la app
})
observeEvent(input$screenshot_bag_entry, {
screenshot()  # Captura toda la pantalla visible de la app
})
observeEvent(input$screenshot_EDS, {
screenshot()  # Captura toda la pantalla visible de la app
})
observeEvent(input$screenshot_NIVEL3, {
screenshot()  # Captura toda la pantalla visible de la app
})
observeEvent(input$screenshot_SORTER, {
screenshot()  # Captura toda la pantalla visible de la app
})
observeEvent(input$screenshot_MES, {
screenshot()  # Captura toda la pantalla visible de la app
})
observeEvent(input$screenshot_MAKEUP, {
screenshot()  # Captura toda la pantalla visible de la app
})
}
#### 4. Ejecutar Aplicación ####
# Ejecutar la aplicación shiny con shinydashboard
shinyApp(ui = ui, server = server)
runApp()
runApp('C:/Users/AdriaGoma/Desktop/App v12')
runApp('C:/Users/AdriaGoma/Desktop/App v12')
runApp('C:/Users/AdriaGoma/Desktop/App v12')
runApp('C:/Users/AdriaGoma/Desktop/App v12')
runApp('C:/Users/AdriaGoma/Desktop/App v12')
runApp('C:/Users/AdriaGoma/Desktop/App v12')
runApp('C:/Users/AdriaGoma/Desktop/App v12')
runApp('C:/Users/AdriaGoma/Desktop/App v12')
runApp('C:/Users/AdriaGoma/Desktop/App v12')
runApp('C:/Users/AdriaGoma/Desktop/App v12')
runApp('C:/Users/AdriaGoma/Desktop/App v12')
runApp('C:/Users/AdriaGoma/Desktop/App v12')
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
install.packages("knitr")
shiny::runApp()
View(plots)
print("plot1")
View("plot1")
runApp()
View(plot)
View(plots)
plots_ops_list()
View(plots_ops_list())
View("plots_ops_list()")
runApp()
View(plots)
runApp()
shiny::runApp()
shiny::runApp()
View(table_bag_entry)
library(knitr)
# Mostrar la tabla en el documento
kable(table_bag_entry, caption = "Tabla de Entradas de Equipajes")
library(knitr)
# Mostrar la tabla en el documento
# kable(table_bag_entry, caption = "Tabla de Entradas de Equipajes")
kable(table_bag_entry, align = rep("c", ncol(table_bag_entry)), caption = "Tabla de Entradas de Equipajes") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE)
library(knitr)
library(kableExtra)
install.packages(kableExtra)
install.packages("kableExtra")
library(knitr)
library(kableExtra)
# Mostrar la tabla en el documento
# kable(table_bag_entry, caption = "Tabla de Entradas de Equipajes")
kable(table_bag_entry, align = rep("c", ncol(table_bag_entry)), caption = "Tabla de Entradas de Equipajes") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE)
library(knitr)
library(kableExtra)
# Mostrar la tabla en el documento
# kable(table_bag_entry, caption = "Tabla de Entradas de Equipajes")
kable(table_bag_entry, align = rep("c", ncol(table_bag_entry)), caption = "Tabla de Entradas de Equipajes") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE)
runApp()
runApp()
runApp()
getwd()
runApp()
library(knitr)
library(kableExtra)
# Mostrar la tabla en el documento
# kable(table_bag_entry, caption = "Tabla de Entradas de Equipajes")
kable(table_sorter, align = rep("c", ncol(table_sorter)), caption = "Tabla de Sorter") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),full_width = FALSE)
library(knitr)
library(kableExtra)
# Mostrar la tabla en el documento
# kable(table_bag_entry, caption = "Tabla de Entradas de Equipajes")
kable(table_eds, align = rep("c", ncol(table_eds)), caption = "Tabla de Líneas EDS") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),full_width = FALSE)
library(knitr)
library(kableExtra)
# Mostrar la tabla en el documento
# kable(table_bag_entry, caption = "Tabla de Nivel 3")
kable(table_L3, align = rep("c", ncol(table_L3)), caption = "Tabla de Nivel 3") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),full_width = FALSE)
library(knitr)
library(kableExtra)
# Mostrar la tabla en el documento
# kable(table_bag_entry, caption = "Tabla de Entradas de Equipajes")
kable(table_mes, align = rep("c", ncol(table_mes)), caption = "Tabla de Estación de Codificación Manual (MES)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),full_width = FALSE)
library(knitr)
library(kableExtra)
# Mostrar la tabla en el documento
# kable(table_bag_entry, caption = "Tabla de Entradas de Equipajes")
kable(table_mes[2:5,], align = rep("c", ncol(table_mes[2:5,])), caption = "Tabla de Estación de Codificación Manual (MES)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),full_width = FALSE)
library(knitr)
library(kableExtra)
# Mostrar la tabla en el documento
# kable(table_bag_entry, caption = "Tabla de Entradas de Equipajes")
kable(table_make_up, align = rep("c", ncol(table_make_up)), caption = "Tabla de Carruseles de Make-up") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),full_width = FALSE)
library(knitr)
library(kableExtra)
# Mostrar la tabla en el documento
# kable(table_bag_entry, caption = "Tabla de Entradas de Equipajes")
table_mu <- rbind(table_make_up[2:7,], table_make_up[10:23,])
kable(table_mu, align = rep("c", ncol(table_mu)), caption = "Tabla de Carruseles de Make-up") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),full_width = FALSE)
library(knitr)
library(kableExtra)
# Mostrar la tabla en el documento
# kable(table_bag_entry, caption = "Tabla de Entradas de Equipajes")
kable(table_ebs, align = rep("c", ncol(table_ebs)), caption = "Tabla de Early Baggage Storage (EBS)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),full_width = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
suppressWarnings({
# Imprimir todos los gráficos generados
print(plot[1])
})
runApp()
suppressWarnings({
# Generar gráficos
generated_plots <- lapply(seq_along(plots), function(i) {
create_plot(
data = plots[[i]]$data,
x_var = "hour",
y_var = plots[[i]]$y_var,
y_label = "Equipajes",
hline_value = plots[[i]]$hline_value
)
})
# Imprimir todos los gráficos generados
#   for (plot in generated_plots) {
#     print(plot)
#   }
})
View(generated_plots)
suppressWarnings({
c <- c(2)
for (plot in c) {
print(plot)
}
})
suppressWarnings({
# Generar gráficos
generated_plots <- lapply(seq_along(plots), function(i) {
create_plot(
data = plots[[i]]$data,
x_var = "hour",
y_var = plots[[i]]$y_var,
y_label = "Equipajes",
hline_value = plots[[i]]$hline_value
)
})
# Imprimir todos los gráficos generados
#   for (plot in generated_plots) {
#     print(plot)
#   }
})
suppressWarnings({
c <- c(2)
for (plot in c) {
print(plot)
}
})
suppressWarnings({
c <- c(2)
for (plot in generated_plots) {
print(1)
}
})
View(plot)
suppressWarnings({
c <- c(2)
for (plot in generated_plots) {
print(plot)
}
})
runApp()
runApp()
runApp()
runApp()
runApp()
View(plots_ops)
runApp()
library(knitr)
library(kableExtra)
# Mostrar la tabla en el documento
# kable(table_bag_entry, caption = "Tabla de Entradas de Equipajes")
kable(table_ebs, align = rep("c", ncol(table_ebs)), caption = "Tabla de Early Baggage Storage (EBS)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),full_width = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
getwd()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(result_L3)
runApp()
View(ddfs_departures_OD)
View(ddfs_departures_transf)
View(ddfs_departures_transf_INT)
View(ddfs_departures_transf_showup)
prueba<- ddfs_departures_transf_showup[FlightNo == "VE9040"]
View(prueba)
runApp()
View(baglist_global)
View(ddfs_complete)
sum(ddfs_complete$Bag_OD+ddfs_complete$Bag_transf)
runApp()
runApp()
runApp()
for(i in 1:length(ddfs_departures_transf_showup$Airline)){
aux_bags_output_transf <- ddfs_departures_transf_showup[i ,colnames(ddfs_departures_transf_showup) %in% as.character(date_colnames), with=FALSE]
aux_flight_data <- ddfs_departures_transf_showup[i, c("FlightNo","Airline","Departure Time","Destination","DOM_INT","CI_Area","Carousel","Car_open","Car_close","Car_open_aux")]
aux_flightno <- ddfs_departures_transf_showup[i]$FlightNo
aux_bags_output_transf[, FlightNo := aux_flightno]
aux_baglist_transf <- melt(aux_bags_output_transf, id.vars = "FlightNo")
aux_baglist_transf[variable == "2022-12-18"]$variable <- "2022-12-18 00:00:00"
aux_baglist_transf[variable == "2022-12-19"]$variable <- "2022-12-19 00:00:00"
aux_baglist_transf[, variable := as.ITime(variable)]
if(length(aux_baglist_transf[value>0,]$value)!=0){
aux_baglist_transf <- aux_baglist_transf[value>0,]
aux_baglist_transf <- aux_baglist_transf[rep(1:.N,value)][,BagID:=1:.N]
aux_baglist_transf[, value := NULL]
setnames(aux_baglist_transf, c("variable"), c("Bag Entry Time"))
aux_baglist_transf <- merge(aux_baglist_transf, aux_flight_data, by = "FlightNo")
if(i == 1){
baglist_transf <- copy(aux_baglist_transf)
}
if(i != 1){
baglist_transf <- rbind(baglist_transf, aux_baglist_transf, fill = TRUE)
}
}
}
View(ddfs_departures_transf_showup)
View(ddfs_complete)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
